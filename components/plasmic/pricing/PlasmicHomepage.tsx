// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: seYsnBL1P3AiXaFGNEMUUM
// Component: g64VYoCfAKTS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: ZdzGQGZE4mJ7/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Checkbox from "../../Checkbox"; // plasmic-import: dk4vJhcf_j2D/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: seYsnBL1P3AiXaFGNEMUUM/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: g64VYoCfAKTS/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: YXzAIe4mJWDL/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 5Kdxmn_uOBnI/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: JK4sPT7lqUH1/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: fEKKJ-2F5BD1/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: 1eqoHYLc_fOB/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WvR12xDIGLgz/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: HAnMzYJg5d76/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: jRHPVqrBy9SV/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 2VY19-xmXXIp/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 22TzxIplc3cE/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  h1?: Flex__<"h1">;
  btnDashboard?: Flex__<"div">;
  btnSpecialsite?: Flex__<"div">;
  btnEhr?: Flex__<"div">;
  btnApi?: Flex__<"div">;
  btnOnlinepayment?: Flex__<"div">;
  btnCalculation?: Flex__<"div">;
  btnAnnouncement?: Flex__<"div">;
  btnReservation?: Flex__<"div">;
  txtReservationInternetResult?: Flex__<"div">;
  txtReservationPhoneResult?: Flex__<"div">;
  txtReservationKioskResult?: Flex__<"div">;
  columns?: Flex__<"div">;
  clReservation?: Flex__<"div">;
  txtInternetReservation?: Flex__<typeof TextInput>;
  txtPhoneReservation?: Flex__<typeof TextInput>;
  txtKioskReservation?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  clAnnouncement?: Flex__<"div">;
  clCalculations?: Flex__<"div">;
  clOnlinepayment?: Flex__<"div">;
  clApi?: Flex__<"div">;
  clEhr?: Flex__<"div">;
  clSpecialsite?: Flex__<"div">;
  clDashboard?: Flex__<"div">;
  clMain?: Flex__<"div">;
  txtResevationCount?: Flex__<typeof TextInput>;
  checkbox?: Flex__<typeof Checkbox>;
  checkbox2?: Flex__<typeof Checkbox>;
  checkbox3?: Flex__<typeof Checkbox>;
  checkbox4?: Flex__<typeof Checkbox>;
  checkbox5?: Flex__<typeof Checkbox>;
  checkbox6?: Flex__<typeof Checkbox>;
  checkbox7?: Flex__<typeof Checkbox>;
  checkbox8?: Flex__<typeof Checkbox>;
  checkbox9?: Flex__<typeof Checkbox>;
  checkbox10?: Flex__<typeof Checkbox>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "clReservationState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clAnnouncementState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clCalculationState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clOnlinepaymentState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clApiState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clEhrState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clSpecialsiteState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clDashboardState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clMainState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "txtInternetReservation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtPhoneReservation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtKioskReservation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "reservationInternetPrice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      },
      {
        path: "reservationPhonePrice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 250
      },
      {
        path: "reservationKioskPrice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 300
      },
      {
        path: "reservationInternetResult",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "reservsationPhoneResult",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "reservationKioskResult",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "txtResevationCount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox5.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox7.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox8.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox9.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox10.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getCurrentUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getCurrentUser"] != null &&
                typeof $steps["getCurrentUser"] === "object" &&
                typeof $steps["getCurrentUser"].then === "function"
              ) {
                $steps["getCurrentUser"] = await $steps["getCurrentUser"];
              }

              $steps["updateUser"] =
                $steps.getCurrentUser.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["user"]
                        },
                        operation: 0,
                        value: $steps.getCurrentUser.data.users[0]
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUser"] != null &&
                typeof $steps["updateUser"] === "object" &&
                typeof $steps["updateUser"].then === "function"
              ) {
                $steps["updateUser"] = await $steps["updateUser"];
              }

              $steps[
                "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
              ] =
                $steps.getCurrentUser.status != 200
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://www.paziresh24.com/login/?redirect_url=https://pricing.paziresh24.com/"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] != null &&
                typeof $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] === "object" &&
                typeof $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ].then === "function"
              ) {
                $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] = await $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ];
              }
            }}
            onUnmount={async () => {
              const $steps = {};
            }}
          />

          <section className={classNames(projectcss.all, sty.section__dkFyp)}>
            <div className={classNames(projectcss.all, sty.freeBox___0ZMo0)}>
              <div className={classNames(projectcss.all, sty.freeBox__vst7D)}>
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {
                    "\u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u067e\u0630\u06cc\u0631\u063424"
                  }
                </h1>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8CihT)}>
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg___0HXtL)}
                  role={"img"}
                />
              </div>
            </div>
            <section className={classNames(projectcss.all, sty.section__wtTOr)}>
              <div className={classNames(projectcss.all, sty.freeBox___7DSvw)}>
                <div
                  data-plasmic-name={"btnDashboard"}
                  data-plasmic-override={overrides.btnDashboard}
                  className={classNames(projectcss.all, sty.btnDashboard)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = true);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__cbLBw)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vlDsf
                    )}
                  >
                    {
                      "\u062f \u0627\u0634\u0628\u0648\u0631\u062f \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnSpecialsite"}
                  data-plasmic-override={overrides.btnSpecialsite}
                  className={classNames(projectcss.all, sty.btnSpecialsite)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = true;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon9Icon
                    className={classNames(projectcss.all, sty.svg___6EjZr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hE1Zn
                    )}
                  >
                    {
                      "\u0633\u0627\u06cc\u062a \u0627\u062e\u062a\u0635\u0627\u0635\u06cc \u0645\u0631\u06a9\u0632"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnEhr"}
                  data-plasmic-override={overrides.btnEhr}
                  className={classNames(projectcss.all, sty.btnEhr)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = true;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon9Icon
                    className={classNames(projectcss.all, sty.svg__rXLkj)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nDe4N
                    )}
                  >
                    {
                      "\u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnApi"}
                  data-plasmic-override={overrides.btnApi}
                  className={classNames(projectcss.all, sty.btnApi)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = true;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__sd3Vz)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Xlf1
                    )}
                  >
                    {
                      "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0627\u06cc\u0631 \u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0627"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnOnlinepayment"}
                  data-plasmic-override={overrides.btnOnlinepayment}
                  className={classNames(projectcss.all, sty.btnOnlinepayment)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = true;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg___8W1Xb)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___143Wr
                    )}
                  >
                    {
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnCalculation"}
                  data-plasmic-override={overrides.btnCalculation}
                  className={classNames(projectcss.all, sty.btnCalculation)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = true;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__yUwH)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fu9J9
                    )}
                  >
                    {"\u0645\u062d\u0627\u0633\u0628\u0627\u062a"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnAnnouncement"}
                  data-plasmic-override={overrides.btnAnnouncement}
                  className={classNames(projectcss.all, sty.btnAnnouncement)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = false;
                                $state.clMainState = false;
                                $state.clAnnouncementState = true;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__ph7A)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__utGl
                    )}
                  >
                    {"\u0627\u0639\u0644\u0627\u0646\u0627\u062a"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnReservation"}
                  data-plasmic-override={overrides.btnReservation}
                  className={classNames(projectcss.all, sty.btnReservation)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.clReservationState = true;
                                $state.clMainState = false;
                                $state.clAnnouncementState = false;
                                $state.clCalculationState = false;
                                $state.clOnlinepaymentState = false;
                                $state.clApiState = false;
                                $state.clEhrState = false;
                                $state.clSpecialsiteState = false;
                                return ($state.clDashboardState = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg___4NJPi)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n3W1V
                    )}
                  >
                    {"\u0646\u0648\u0628\u062a \u062f\u0647\u06cc"}
                  </div>
                </div>
              </div>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__sTanX)}>
            <div className={classNames(projectcss.all, sty.freeBox___6V1K)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__pbNpV)}
                dir={"rtl"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jN61S
                  )}
                >
                  {
                    "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628:"
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6UN4D)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__txSdd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bWvcv
                      )}
                    >
                      {
                        "\u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u067e\u0627\u06cc\u0647:"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qr6DK)}
                  >
                    <div
                      data-plasmic-name={"txtReservationInternetResult"}
                      data-plasmic-override={
                        overrides.txtReservationInternetResult
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.txtReservationInternetResult
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.reservationInternetResult;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "0";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__icJ7C)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3F5BM)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oCjWa
                      )}
                    >
                      {
                        "\u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u0644\u0641\u0646\u06cc:"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___50XVp)}
                  >
                    <div
                      data-plasmic-name={"txtReservationPhoneResult"}
                      data-plasmic-override={
                        overrides.txtReservationPhoneResult
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.txtReservationPhoneResult
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.reservsationPhoneResult;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__o5T2K)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c3Ih0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tAq0C
                      )}
                    >
                      {
                        "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0635\u0641 \u0648 \u0641\u0631\u0627\u062e\u0648\u0627\u0646"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mictd)}
                  >
                    <div
                      data-plasmic-name={"txtReservationKioskResult"}
                      data-plasmic-override={
                        overrides.txtReservationKioskResult
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.txtReservationKioskResult
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.reservationKioskResult;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___6LVp)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  {(() => {
                    try {
                      return $state.clReservationState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clReservation"}
                      data-plasmic-override={overrides.clReservation}
                      className={classNames(projectcss.all, sty.clReservation)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w6AX6
                        )}
                      >
                        {"\u0646\u0648\u0628\u062a \u062f\u0647\u06cc"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rpnki
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kzwO
                          )}
                          dir={"rtl"}
                        >
                          <TextInput
                            data-plasmic-name={"txtInternetReservation"}
                            data-plasmic-override={
                              overrides.txtInternetReservation
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.txtInternetReservation
                            )}
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "txtInternetReservation",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                            }
                            value={
                              generateStateValueProp($state, [
                                "txtInternetReservation",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sEn0F
                          )}
                          dir={"rtl"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cgsHj
                            )}
                          >
                            {
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc:"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g8Pc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vSifj
                          )}
                          dir={"rtl"}
                        >
                          <TextInput
                            data-plasmic-name={"txtPhoneReservation"}
                            data-plasmic-override={
                              overrides.txtPhoneReservation
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.txtPhoneReservation
                            )}
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "txtPhoneReservation",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u062a\u0644\u0641\u0646\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                            }
                            value={
                              generateStateValueProp($state, [
                                "txtPhoneReservation",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b0K0E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n3Kp0
                            )}
                            dir={"rtl"}
                          >
                            {
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u062a\u0644\u0641\u0646\u06cc:"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1ZgP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oLvKu
                          )}
                          dir={"rtl"}
                        >
                          <TextInput
                            data-plasmic-name={"txtKioskReservation"}
                            data-plasmic-override={
                              overrides.txtKioskReservation
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.txtKioskReservation
                            )}
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "txtKioskReservation",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u06a9\u06cc\u0648\u0633\u06a9 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                            }
                            value={
                              generateStateValueProp($state, [
                                "txtKioskReservation",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tdneg
                          )}
                          dir={"rtl"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tHMbr
                            )}
                          >
                            {
                              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u06a9\u06cc\u0648\u0633\u06a9:"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aZe2N
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6YCaW
                          )}
                        >
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            children2={"\u062b\u0628\u062a"}
                            className={classNames("__wab_instance", sty.button)}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.reservationInternetResult =
                                            $state.reservationInternetPrice *
                                            $state.txtInternetReservation.value;
                                          $state.reservsationPhoneResult =
                                            $state.reservationPhonePrice *
                                            $state.txtPhoneReservation.value;
                                          return ($state.reservationKioskResult =
                                            $state.reservationKioskPrice *
                                            $state.txtKioskReservation.value);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />
                        </div>
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clAnnouncementState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clAnnouncement"}
                      data-plasmic-override={overrides.clAnnouncement}
                      className={classNames(projectcss.all, sty.clAnnouncement)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x2Jmq
                        )}
                      >
                        {"\u0627\u0639\u0644\u0627\u0646\u0627\u062a"}
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clCalculationState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clCalculations"}
                      data-plasmic-override={overrides.clCalculations}
                      className={classNames(projectcss.all, sty.clCalculations)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yHvEa
                        )}
                      >
                        {"\u0645\u062d\u0627\u0633\u0628\u0627\u062a"}
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clOnlinepaymentState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clOnlinepayment"}
                      data-plasmic-override={overrides.clOnlinepayment}
                      className={classNames(
                        projectcss.all,
                        sty.clOnlinepayment
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Jdcw
                        )}
                      >
                        {
                          "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                        }
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clApiState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clApi"}
                      data-plasmic-override={overrides.clApi}
                      className={classNames(projectcss.all, sty.clApi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ddw3B
                        )}
                      >
                        {
                          "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0627\u06cc\u0631 \u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0627"
                        }
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clEhrState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clEhr"}
                      data-plasmic-override={overrides.clEhr}
                      className={classNames(projectcss.all, sty.clEhr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ws91A
                        )}
                      >
                        {
                          "\u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
                        }
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clSpecialsiteState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clSpecialsite"}
                      data-plasmic-override={overrides.clSpecialsite}
                      className={classNames(projectcss.all, sty.clSpecialsite)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xjtg5
                        )}
                      >
                        {
                          "\u0633\u0627\u06cc\u062a \u0627\u062e\u062a\u0635\u0627\u0635\u06cc"
                        }
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clDashboardState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clDashboard"}
                      data-plasmic-override={overrides.clDashboard}
                      className={classNames(projectcss.all, sty.clDashboard)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vcuHr
                        )}
                      >
                        {
                          "\u062f\u0627\u0634\u0628\u0648\u0631\u062f \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc"
                        }
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.clMainState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clMain"}
                      data-plasmic-override={overrides.clMain}
                      className={classNames(projectcss.all, sty.clMain)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qqROb
                        )}
                      >
                        {
                          "\u062c\u0647\u062a \u0628\u0631\u0622\u0648\u0631\u062f \u0642\u06cc\u0645\u062a \u0627\u0628\u062a\u062f\u0627 \u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u0645\u0627\u0647\u06cc\u0627\u0646\u0647 \u0645\u062f\u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0648 \u0645\u0627\u0698\u0648\u0644 \u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f:"
                        }
                      </div>
                    </div>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xNvEz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__czMkd)}
                    dir={"rtl"}
                  >
                    <TextInput
                      data-plasmic-name={"txtResevationCount"}
                      data-plasmic-override={overrides.txtResevationCount}
                      className={classNames(
                        "__wab_instance",
                        sty.txtResevationCount
                      )}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "txtResevationCount",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtResevationCount",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rHtRv)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Qi4Y
                      )}
                    >
                      {
                        "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a:"
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wX9TB)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__an2Xd)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l7SdE
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u067e\u0627\u06cc\u0647"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__grh2Y)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yfMB)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___81XZh)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gxjEp
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u0644\u0641\u0646\u06cc"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4OZzs)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox2"}
                      data-plasmic-override={overrides.checkbox2}
                      className={classNames("__wab_instance", sty.checkbox2)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox2",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox2",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cSq4C)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___83JL)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xstgH
                      )}
                    >
                      {
                        "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0635\u0641 \u0648 \u0641\u0631\u0627\u062e\u0648\u0627\u0646"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sqHf9)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox3"}
                      data-plasmic-override={overrides.checkbox3}
                      className={classNames("__wab_instance", sty.checkbox3)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox3",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox3",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ypsB0)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qMtKh)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j84I
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u0627\u0639\u0644\u0627\u0646\u0627\u062a"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__utNh)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox4"}
                      data-plasmic-override={overrides.checkbox4}
                      className={classNames("__wab_instance", sty.checkbox4)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox4",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox4",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__a44Iy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zJYbx)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xiDui
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u0645\u062d\u0627\u0633\u0628\u0627\u062a"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eBe7H)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox5"}
                      data-plasmic-override={overrides.checkbox5}
                      className={classNames("__wab_instance", sty.checkbox5)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox5",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox5",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vstLs)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cHbRg)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mFmSg
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ctwHa)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox6"}
                      data-plasmic-override={overrides.checkbox6}
                      className={classNames("__wab_instance", sty.checkbox6)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox6",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox6",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eDdxo)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ubeCl)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mqwTe
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0627\u06cc\u0631 \u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0627"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lQiZc)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox7"}
                      data-plasmic-override={overrides.checkbox7}
                      className={classNames("__wab_instance", sty.checkbox7)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox7",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox7",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__th79A)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oanOw)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zzTaF
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hxRxo)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox8"}
                      data-plasmic-override={overrides.checkbox8}
                      className={classNames("__wab_instance", sty.checkbox8)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox8",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox8",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ufKuf)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dnhQr)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dXYjf
                      )}
                    >
                      {
                        "\u0645\u0627\u0632\u0648\u0644 \u067e\u0631\u0648\u0646\u062f\u0647 \u0633\u0627\u06cc\u062a \u0627\u062e\u062a\u0635\u0627\u0635\u06cc \u0645\u0631\u06a9\u0632"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fKKm5)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox9"}
                      data-plasmic-override={overrides.checkbox9}
                      className={classNames("__wab_instance", sty.checkbox9)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox9",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox9",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__swDcY)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ple)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rgMxE
                      )}
                    >
                      {
                        "\u062f\u0627\u0634\u0628\u0648\u0631\u062f \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yfTLj)}
                    dir={"rtl"}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox10"}
                      data-plasmic-override={overrides.checkbox10}
                      className={classNames("__wab_instance", sty.checkbox10)}
                      isChecked={
                        generateStateValueProp($state, [
                          "checkbox10",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox10",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {""}
                    </Checkbox>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "h1",
    "btnDashboard",
    "btnSpecialsite",
    "btnEhr",
    "btnApi",
    "btnOnlinepayment",
    "btnCalculation",
    "btnAnnouncement",
    "btnReservation",
    "txtReservationInternetResult",
    "txtReservationPhoneResult",
    "txtReservationKioskResult",
    "columns",
    "clReservation",
    "txtInternetReservation",
    "txtPhoneReservation",
    "txtKioskReservation",
    "button",
    "clAnnouncement",
    "clCalculations",
    "clOnlinepayment",
    "clApi",
    "clEhr",
    "clSpecialsite",
    "clDashboard",
    "clMain",
    "txtResevationCount",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "checkbox9",
    "checkbox10"
  ],
  sideEffect: ["sideEffect"],
  h1: ["h1"],
  btnDashboard: ["btnDashboard"],
  btnSpecialsite: ["btnSpecialsite"],
  btnEhr: ["btnEhr"],
  btnApi: ["btnApi"],
  btnOnlinepayment: ["btnOnlinepayment"],
  btnCalculation: ["btnCalculation"],
  btnAnnouncement: ["btnAnnouncement"],
  btnReservation: ["btnReservation"],
  txtReservationInternetResult: ["txtReservationInternetResult"],
  txtReservationPhoneResult: ["txtReservationPhoneResult"],
  txtReservationKioskResult: ["txtReservationKioskResult"],
  columns: [
    "columns",
    "clReservation",
    "txtInternetReservation",
    "txtPhoneReservation",
    "txtKioskReservation",
    "button",
    "clAnnouncement",
    "clCalculations",
    "clOnlinepayment",
    "clApi",
    "clEhr",
    "clSpecialsite",
    "clDashboard",
    "clMain"
  ],
  clReservation: [
    "clReservation",
    "txtInternetReservation",
    "txtPhoneReservation",
    "txtKioskReservation",
    "button"
  ],
  txtInternetReservation: ["txtInternetReservation"],
  txtPhoneReservation: ["txtPhoneReservation"],
  txtKioskReservation: ["txtKioskReservation"],
  button: ["button"],
  clAnnouncement: ["clAnnouncement"],
  clCalculations: ["clCalculations"],
  clOnlinepayment: ["clOnlinepayment"],
  clApi: ["clApi"],
  clEhr: ["clEhr"],
  clSpecialsite: ["clSpecialsite"],
  clDashboard: ["clDashboard"],
  clMain: ["clMain"],
  txtResevationCount: ["txtResevationCount"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  checkbox5: ["checkbox5"],
  checkbox6: ["checkbox6"],
  checkbox7: ["checkbox7"],
  checkbox8: ["checkbox8"],
  checkbox9: ["checkbox9"],
  checkbox10: ["checkbox10"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  h1: "h1";
  btnDashboard: "div";
  btnSpecialsite: "div";
  btnEhr: "div";
  btnApi: "div";
  btnOnlinepayment: "div";
  btnCalculation: "div";
  btnAnnouncement: "div";
  btnReservation: "div";
  txtReservationInternetResult: "div";
  txtReservationPhoneResult: "div";
  txtReservationKioskResult: "div";
  columns: "div";
  clReservation: "div";
  txtInternetReservation: typeof TextInput;
  txtPhoneReservation: typeof TextInput;
  txtKioskReservation: typeof TextInput;
  button: typeof Button;
  clAnnouncement: "div";
  clCalculations: "div";
  clOnlinepayment: "div";
  clApi: "div";
  clEhr: "div";
  clSpecialsite: "div";
  clDashboard: "div";
  clMain: "div";
  txtResevationCount: typeof TextInput;
  checkbox: typeof Checkbox;
  checkbox2: typeof Checkbox;
  checkbox3: typeof Checkbox;
  checkbox4: typeof Checkbox;
  checkbox5: typeof Checkbox;
  checkbox6: typeof Checkbox;
  checkbox7: typeof Checkbox;
  checkbox8: typeof Checkbox;
  checkbox9: typeof Checkbox;
  checkbox10: typeof Checkbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    h1: makeNodeComponent("h1"),
    btnDashboard: makeNodeComponent("btnDashboard"),
    btnSpecialsite: makeNodeComponent("btnSpecialsite"),
    btnEhr: makeNodeComponent("btnEhr"),
    btnApi: makeNodeComponent("btnApi"),
    btnOnlinepayment: makeNodeComponent("btnOnlinepayment"),
    btnCalculation: makeNodeComponent("btnCalculation"),
    btnAnnouncement: makeNodeComponent("btnAnnouncement"),
    btnReservation: makeNodeComponent("btnReservation"),
    txtReservationInternetResult: makeNodeComponent(
      "txtReservationInternetResult"
    ),
    txtReservationPhoneResult: makeNodeComponent("txtReservationPhoneResult"),
    txtReservationKioskResult: makeNodeComponent("txtReservationKioskResult"),
    columns: makeNodeComponent("columns"),
    clReservation: makeNodeComponent("clReservation"),
    txtInternetReservation: makeNodeComponent("txtInternetReservation"),
    txtPhoneReservation: makeNodeComponent("txtPhoneReservation"),
    txtKioskReservation: makeNodeComponent("txtKioskReservation"),
    button: makeNodeComponent("button"),
    clAnnouncement: makeNodeComponent("clAnnouncement"),
    clCalculations: makeNodeComponent("clCalculations"),
    clOnlinepayment: makeNodeComponent("clOnlinepayment"),
    clApi: makeNodeComponent("clApi"),
    clEhr: makeNodeComponent("clEhr"),
    clSpecialsite: makeNodeComponent("clSpecialsite"),
    clDashboard: makeNodeComponent("clDashboard"),
    clMain: makeNodeComponent("clMain"),
    txtResevationCount: makeNodeComponent("txtResevationCount"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    checkbox5: makeNodeComponent("checkbox5"),
    checkbox6: makeNodeComponent("checkbox6"),
    checkbox7: makeNodeComponent("checkbox7"),
    checkbox8: makeNodeComponent("checkbox8"),
    checkbox9: makeNodeComponent("checkbox9"),
    checkbox10: makeNodeComponent("checkbox10"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
