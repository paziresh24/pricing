// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: seYsnBL1P3AiXaFGNEMUUM
// Component: g64VYoCfAKTS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: seYsnBL1P3AiXaFGNEMUUM/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: g64VYoCfAKTS/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 5Kdxmn_uOBnI/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: JK4sPT7lqUH1/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: fEKKJ-2F5BD1/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: 1eqoHYLc_fOB/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WvR12xDIGLgz/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: HAnMzYJg5d76/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: jRHPVqrBy9SV/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  h1?: Flex__<"h1">;
  btnDashboard?: Flex__<"div">;
  btnSpecialsite?: Flex__<"div">;
  btnEhr?: Flex__<"div">;
  btnApi?: Flex__<"div">;
  btnOnlinepayment?: Flex__<"div">;
  btnCalculation?: Flex__<"div">;
  btnAnnouncement?: Flex__<"div">;
  btnReservation?: Flex__<"div">;
  columns?: Flex__<"div">;
  clReservation?: Flex__<"div">;
  clAnnouncement?: Flex__<"div">;
  clCalculations?: Flex__<"div">;
  clOnlinepayment?: Flex__<"div">;
  clApi?: Flex__<"div">;
  clEhr?: Flex__<"div">;
  clSpecialsite?: Flex__<"div">;
  clDashboard?: Flex__<"div">;
  clMain?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "clReservationState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "clAnnouncementState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getCurrentUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getCurrentUser"] != null &&
                typeof $steps["getCurrentUser"] === "object" &&
                typeof $steps["getCurrentUser"].then === "function"
              ) {
                $steps["getCurrentUser"] = await $steps["getCurrentUser"];
              }

              $steps["updateUser"] =
                $steps.getCurrentUser.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["user"]
                        },
                        operation: 0,
                        value: $steps.getCurrentUser.data.users[0]
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUser"] != null &&
                typeof $steps["updateUser"] === "object" &&
                typeof $steps["updateUser"].then === "function"
              ) {
                $steps["updateUser"] = await $steps["updateUser"];
              }

              $steps[
                "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
              ] =
                $steps.getCurrentUser.status != 200
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://www.paziresh24.com/login/?redirect_url=https://pricing.paziresh24.com/"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] != null &&
                typeof $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] === "object" &&
                typeof $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ].then === "function"
              ) {
                $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ] = await $steps[
                  "goToHttpswwwpaziresh24ComloginredirectUrlhttpspricingpaziresh24Com"
                ];
              }
            }}
            onUnmount={async () => {
              const $steps = {};
            }}
          />

          <section className={classNames(projectcss.all, sty.section__dkFyp)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {
                "\n\u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u067e\u0630\u06cc\u0631\u063424\n"
              }
            </h1>
            <section className={classNames(projectcss.all, sty.section__wtTOr)}>
              <div className={classNames(projectcss.all, sty.freeBox___7DSvw)}>
                <div
                  data-plasmic-name={"btnDashboard"}
                  data-plasmic-override={overrides.btnDashboard}
                  className={classNames(projectcss.all, sty.btnDashboard)}
                >
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__cbLBw)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vlDsf
                    )}
                  >
                    {
                      "\u062f \u0627\u0634\u0628\u0648\u0631\u062f \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnSpecialsite"}
                  data-plasmic-override={overrides.btnSpecialsite}
                  className={classNames(projectcss.all, sty.btnSpecialsite)}
                >
                  <Icon9Icon
                    className={classNames(projectcss.all, sty.svg___6EjZr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hE1Zn
                    )}
                  >
                    {
                      "\u0633\u0627\u06cc\u062a \u0627\u062e\u062a\u0635\u0627\u0635\u06cc \u0645\u0631\u06a9\u0632"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnEhr"}
                  data-plasmic-override={overrides.btnEhr}
                  className={classNames(projectcss.all, sty.btnEhr)}
                >
                  <Icon9Icon
                    className={classNames(projectcss.all, sty.svg__rXLkj)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nDe4N
                    )}
                  >
                    {
                      "\u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnApi"}
                  data-plasmic-override={overrides.btnApi}
                  className={classNames(projectcss.all, sty.btnApi)}
                >
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__sd3Vz)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Xlf1
                    )}
                  >
                    {
                      "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0627\u06cc\u0631 \u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0627"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnOnlinepayment"}
                  data-plasmic-override={overrides.btnOnlinepayment}
                  className={classNames(projectcss.all, sty.btnOnlinepayment)}
                >
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg___8W1Xb)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___143Wr
                    )}
                  >
                    {
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnCalculation"}
                  data-plasmic-override={overrides.btnCalculation}
                  className={classNames(projectcss.all, sty.btnCalculation)}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__yUwH)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fu9J9
                    )}
                  >
                    {"\u0645\u062d\u0627\u0633\u0628\u0627\u062a"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnAnnouncement"}
                  data-plasmic-override={overrides.btnAnnouncement}
                  className={classNames(projectcss.all, sty.btnAnnouncement)}
                >
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__ph7A)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__utGl
                    )}
                  >
                    {"\u0627\u0639\u0644\u0627\u0646\u0627\u062a"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"btnReservation"}
                  data-plasmic-override={overrides.btnReservation}
                  className={classNames(projectcss.all, sty.btnReservation)}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg___4NJPi)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n3W1V
                    )}
                  >
                    {"\u0646\u0648\u0628\u062a \u062f\u0647\u06cc"}
                  </div>
                </div>
              </div>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__sTanX)}>
            <div className={classNames(projectcss.all, sty.freeBox___6V1K)}>
              <div className={classNames(projectcss.all, sty.freeBox__pbNpV)} />

              <div className={classNames(projectcss.all, sty.freeBox___6LVp)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  {(() => {
                    try {
                      return $state.clReservationState;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"clReservation"}
                      data-plasmic-override={overrides.clReservation}
                      className={classNames(projectcss.all, sty.clReservation)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w6AX6
                        )}
                      >
                        {"\u0646\u0648\u0628\u062a \u062f\u0647\u06cc"}
                      </div>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"clAnnouncement"}
                    data-plasmic-override={overrides.clAnnouncement}
                    className={classNames(projectcss.all, sty.clAnnouncement)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x2Jmq
                      )}
                    >
                      {"\u0627\u0639\u0644\u0627\u0646\u0627\u062a"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clCalculations"}
                    data-plasmic-override={overrides.clCalculations}
                    className={classNames(projectcss.all, sty.clCalculations)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yHvEa
                      )}
                    >
                      {"\u0645\u062d\u0627\u0633\u0628\u0627\u062a"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clOnlinepayment"}
                    data-plasmic-override={overrides.clOnlinepayment}
                    className={classNames(projectcss.all, sty.clOnlinepayment)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Jdcw
                      )}
                    >
                      {
                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clApi"}
                    data-plasmic-override={overrides.clApi}
                    className={classNames(projectcss.all, sty.clApi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ddw3B
                      )}
                    >
                      {
                        "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0633\u0627\u06cc\u0631 \u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0627"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clEhr"}
                    data-plasmic-override={overrides.clEhr}
                    className={classNames(projectcss.all, sty.clEhr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ws91A
                      )}
                    >
                      {
                        "\u067e\u0631\u0648\u0646\u062f\u0647 \u0628\u06cc\u0645\u0627\u0631"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clSpecialsite"}
                    data-plasmic-override={overrides.clSpecialsite}
                    className={classNames(projectcss.all, sty.clSpecialsite)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xjtg5
                      )}
                    >
                      {
                        "\u0633\u0627\u06cc\u062a \u0627\u062e\u062a\u0635\u0627\u0635\u06cc"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clDashboard"}
                    data-plasmic-override={overrides.clDashboard}
                    className={classNames(projectcss.all, sty.clDashboard)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vcuHr
                      )}
                    >
                      {
                        "\u062f\u0627\u0634\u0628\u0648\u0631\u062f \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"clMain"}
                    data-plasmic-override={overrides.clMain}
                    className={classNames(projectcss.all, sty.clMain)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qqROb
                      )}
                    >
                      {
                        "\u062c\u0647\u062a \u0628\u0631\u0622\u0648\u0631\u062f \u0642\u06cc\u0645\u062a \u0627\u0628\u062a\u062f\u0627 \u06cc\u06a9 \u0645\u0627\u0698\u0648\u0644 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "h1",
    "btnDashboard",
    "btnSpecialsite",
    "btnEhr",
    "btnApi",
    "btnOnlinepayment",
    "btnCalculation",
    "btnAnnouncement",
    "btnReservation",
    "columns",
    "clReservation",
    "clAnnouncement",
    "clCalculations",
    "clOnlinepayment",
    "clApi",
    "clEhr",
    "clSpecialsite",
    "clDashboard",
    "clMain"
  ],
  sideEffect: ["sideEffect"],
  h1: ["h1"],
  btnDashboard: ["btnDashboard"],
  btnSpecialsite: ["btnSpecialsite"],
  btnEhr: ["btnEhr"],
  btnApi: ["btnApi"],
  btnOnlinepayment: ["btnOnlinepayment"],
  btnCalculation: ["btnCalculation"],
  btnAnnouncement: ["btnAnnouncement"],
  btnReservation: ["btnReservation"],
  columns: [
    "columns",
    "clReservation",
    "clAnnouncement",
    "clCalculations",
    "clOnlinepayment",
    "clApi",
    "clEhr",
    "clSpecialsite",
    "clDashboard",
    "clMain"
  ],
  clReservation: ["clReservation"],
  clAnnouncement: ["clAnnouncement"],
  clCalculations: ["clCalculations"],
  clOnlinepayment: ["clOnlinepayment"],
  clApi: ["clApi"],
  clEhr: ["clEhr"],
  clSpecialsite: ["clSpecialsite"],
  clDashboard: ["clDashboard"],
  clMain: ["clMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  h1: "h1";
  btnDashboard: "div";
  btnSpecialsite: "div";
  btnEhr: "div";
  btnApi: "div";
  btnOnlinepayment: "div";
  btnCalculation: "div";
  btnAnnouncement: "div";
  btnReservation: "div";
  columns: "div";
  clReservation: "div";
  clAnnouncement: "div";
  clCalculations: "div";
  clOnlinepayment: "div";
  clApi: "div";
  clEhr: "div";
  clSpecialsite: "div";
  clDashboard: "div";
  clMain: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    h1: makeNodeComponent("h1"),
    btnDashboard: makeNodeComponent("btnDashboard"),
    btnSpecialsite: makeNodeComponent("btnSpecialsite"),
    btnEhr: makeNodeComponent("btnEhr"),
    btnApi: makeNodeComponent("btnApi"),
    btnOnlinepayment: makeNodeComponent("btnOnlinepayment"),
    btnCalculation: makeNodeComponent("btnCalculation"),
    btnAnnouncement: makeNodeComponent("btnAnnouncement"),
    btnReservation: makeNodeComponent("btnReservation"),
    columns: makeNodeComponent("columns"),
    clReservation: makeNodeComponent("clReservation"),
    clAnnouncement: makeNodeComponent("clAnnouncement"),
    clCalculations: makeNodeComponent("clCalculations"),
    clOnlinepayment: makeNodeComponent("clOnlinepayment"),
    clApi: makeNodeComponent("clApi"),
    clEhr: makeNodeComponent("clEhr"),
    clSpecialsite: makeNodeComponent("clSpecialsite"),
    clDashboard: makeNodeComponent("clDashboard"),
    clMain: makeNodeComponent("clMain"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
